@using Microsoft.AspNetCore.Components
@using Newbe.BookmarkManager.Services
@using WebExtensions.Net.Tabs
@using System.Text.Json
@using System.Text
<<<<<<< HEAD
@inject IJSRuntime JS
=======
@using Microsoft.Extensions.Options
@using Newbe.BookmarkManager.Services.Configuration
@using Newbe.BookmarkManager.Services.EventHubs
@using Newbe.BookmarkManager.Services.SimpleData
>>>>>>> main
<Modal Title="@("Control Panel")"
       Visible="@Visible"
       OnOk="@HandleUserOptionsOk"
       OnCancel="@HandleUserOptionsCancel"
       AfterClose="OnAfterClose"
       MaskClosable="false"
       DestroyOnClose="true"
       Width="1200">
    <Collapse ExpandIcon="caret-right" Bordered="false">
        @if (_modal.AcceptPrivacyAgreement)
        {
<<<<<<< HEAD
            <FormItem Label="👋 Anonymous Improving">
                <Switch @bind-Value="@context.ApplicationInsightFeature.Enabled" />
                <p>👋 Recommended to enable</p>
                <p>Collecting fully anonymous application performance and error logs helps us to continually strive to provide you with better applications. When enabled, we will collect information about the application's errors, the time spent on each operation, and other data that is not related to personal information. </p>
                <p>Modifying the options will only take effect after you restart your browser</p>.
            </FormItem>
            <FormItem Label="🌏 Enable Pinyin">
                <Switch @bind-Value="@context.PinyinFeature.Enabled" />
            </FormItem>
            @if (context.PinyinFeature.Enabled)
            {
                <FormItem Label="Access Token">
                    <TextArea @bind-Value="@context.PinyinFeature.AccessToken" />
                    <p>
                        <Icon Type="question" Theme="outline" />
                        You can get an access token from <a href="https://user.newbe.pro/Identity/Account/Manage/AccessToken" target="_blank">user.newbe.pro</a>.
                    </p>
                </FormItem>
                <FormItem Label="Pinyin Api BaseUrl">
                    <Input @bind-Value="@context.PinyinFeature.BaseUrl" />
                </FormItem>
            }
            <FormItem Label="☁ Enable Cloud Sync">
                <Switch @bind-Value="@context.CloudBkFeature.Enabled" />
            </FormItem>
            @if (context.CloudBkFeature.Enabled)
            {
                <FormItem Label="Access Token">
                    <TextArea @bind-Value="@context.CloudBkFeature.AccessToken" />
                    <p>
                        <Icon Type="question" Theme="outline" />
                        You can get an access token from <a href="https://user.newbe.pro/Identity/Account/Manage/AccessToken" target="_blank">user.newbe.pro</a>.
                    </p>
                </FormItem>
                <FormItem Label="Cloud Sync Api BaseUrl">
                    <Input @bind-Value="@context.CloudBkFeature.BaseUrl" />
                </FormItem>
            }
=======
            <ApplicationInsightPanel UserOptions="_modal"></ApplicationInsightPanel>
            <CloudBkPanel UserOptions="_modal"></CloudBkPanel>
            <PinyinPanel UserOptions="_modal"></PinyinPanel>
>>>>>>> main
        }
        else
        {
            <Panel Header="User Privacy Agreement"
                   Active="true">
                <p>The following features may transfer some data to cloud servers, so please <a href="@StaticUrlOptions.Value.PrivacyAgreement" target="_blank">click here</a>, read and understand our User Privacy Agreement. After you confirm and agree to the content of the agreement click the button below to enable the advanced features.</p>
                <p>Feature shows as below:</p>
                <ul>
                    <li>Pinyin Support. You could search your bookmark title and your tags by PinYin. </li>
                    <li>Tags Cloud Sync. You could sync your bookmark tags in multiple device. </li>
                </ul>
                <Button OnClick="OnClickAgreeUserPrivacyAgreement" Type="primary">I agree to the User Privacy Agreement</Button>
            </Panel>
        }
<<<<<<< HEAD
        <FormItem Label="🔥 Enable Hot Tags">
            <Switch @bind-Value="@context.HotTagsFeature.Enabled" />
        </FormItem>
        @if (context.HotTagsFeature.Enabled)
        {
            <FormItem Label="List Count">
                <AntDesign.InputNumber @bind-Value="@context.HotTagsFeature.ListCount"
                                       Min="1"
                                       Max="100"
                                       DefaultValue="10" />
            </FormItem>
        }
        <FormItem Label="System Actions">
            <Button OnClick="OnClickDumpDataAsync">Dump data to console</Button>
            <Button OnClick="OnClickResumeFactorySetting" Danger>Resume factory setting of Amazing Favirotes</Button>
        </FormItem>
        <FormItem Label="Background Image">
            <Switch @bind-Value="@context.BackgroundImageFeature.Enabled" />
            @if (context.BackgroundImageFeature.Enabled)
            {
                <FormItem Label="Background Image BaseUrl">
                    <Input @bind-Value="@context.BackgroundImageFeature.BaseUrl" />
                </FormItem>
            }
        </FormItem>
    </Form>
=======
        <HotTagsPanel UserOptions="_modal"></HotTagsPanel>
        <SystemActionsPanel></SystemActionsPanel>
    </Collapse>
>>>>>>> main
</Modal>

@code {

    [Inject]
    public IUserOptionsService UserOptionsService { get; set; }

    [Inject]
    public IAfEventHub AfEventHub { get; set; }

    [Inject]
    public IOptions<StaticUrlOptions> StaticUrlOptions { get; set; }

    private ModalModel _modal = new();
    private bool _visible;
    private OneDriveStatics _oneDriveStatics = new();
    private GoogleDriveStatics _googleDriveStatics = new();

    [Parameter]
    public bool Visible
    {
        get => _visible;
        set
        {
            _visible = value;
            if (value)
            {
                InvokeAsync(LoadUserOptions);
            }
        }
    }

    [Parameter]
    public virtual EventCallback<bool> VisibleChanged { get; set; }

    [Parameter]
    public EventCallback OnClickResumeFactorySetting { get; set; }

    [Parameter]
    public EventCallback<OnUserOptionSaveArgs> OnUserOptionSave { get; set; }

    public record OnUserOptionSaveArgs(UserOptions Options);

    public class ModalModel
    {
        public bool AcceptPrivacyAgreement { get; set; }
        public PinyinFeature PinyinFeature { get; set; }
        public CloudBkFeature CloudBkFeature { get; set; }
        public HotTagsFeature HotTagsFeature { get; set; }
        public ApplicationInsightFeature ApplicationInsightFeature { get; set; }
        public BackgroundImageFeature BackgroundImageFeature { get; set; }
    }

    private async Task OnClickAgreeUserPrivacyAgreement()
    {
        _modal.AcceptPrivacyAgreement = true;
<<<<<<< HEAD
        await UserOptionsService.SaveAsync(new UserOptions
        {
            AcceptPrivacyAgreement = _modal.AcceptPrivacyAgreement,
            PinyinFeature = _modal.PinyinFeature,
            CloudBkFeature = _modal.CloudBkFeature,
            ApplicationInsightFeature = _modal.ApplicationInsightFeature,
            HotTagsFeature = _modal.HotTagsFeature,
            BackgroundImageFeature = _modal.BackgroundImageFeature
        });
=======
        var userOptions = MapToUserOptions();
        await UserOptionsService.SaveAsync(userOptions);
>>>>>>> main
    }

    private async Task CloseControlPanel()
    {
        await VisibleChanged.InvokeAsync(false);
    }

    private async Task HandleUserOptionsOk(MouseEventArgs e)
    {
        var userOptions = MapToUserOptions();

        await UserOptionsService.SaveAsync(userOptions);
        await AfEventHub.PublishAsync(new UserOptionSaveEvent
        {
            UserOptions = userOptions,
        });
        await OnUserOptionSave.InvokeAsync(new OnUserOptionSaveArgs(userOptions));
        await CloseControlPanel();
    }

    private UserOptions MapToUserOptions()
    {
        var userOptions = new UserOptions
        {
            AcceptPrivacyAgreementVersion = _modal.AcceptPrivacyAgreement
                ? Consts.PrivacyAgreementVersionDate
                : string.Empty,
            AcceptPrivacyAgreementBefore = _modal.AcceptPrivacyAgreement,
            PinyinFeature = _modal.PinyinFeature,
            CloudBkFeature = _modal.CloudBkFeature,
            HotTagsFeature = _modal.HotTagsFeature,
            ApplicationInsightFeature = _modal.ApplicationInsightFeature,
            BackgroundImageFeature = _modal.BackgroundImageFeature
        };
        return userOptions;
    }

    private async Task HandleUserOptionsCancel(MouseEventArgs e)
    {
        await CloseControlPanel();
    }

    private async Task OnAfterClose()
    {
        await CloseControlPanel();
    }

    private async Task LoadUserOptions()
    {
        var options = await UserOptionsService.GetOptionsAsync();
        _modal.PinyinFeature = options.PinyinFeature;
        _modal.CloudBkFeature = options.CloudBkFeature;
        _modal.HotTagsFeature = options.HotTagsFeature;
        _modal.ApplicationInsightFeature = options.ApplicationInsightFeature;
<<<<<<< HEAD
        _modal.BackgroundImageFeature = options.BackgroundImageFeature;
        _modal.AcceptPrivacyAgreement = options.AcceptPrivacyAgreement == true;
=======
        _modal.AcceptPrivacyAgreement = options.AcceptPrivacyAgreement;
>>>>>>> main
    }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        await LoadUserOptions();
    }

<<<<<<< HEAD
    private async Task OnChangeBackgroundImage()
    {
        //await JS.InvokeVoidAsync("applyStyleForElement",
        //new { id = "sortColumn", value = "newClassName" });
    }
=======

>>>>>>> main
}